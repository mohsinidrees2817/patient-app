"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/context/Globalcontext.jsx":
/*!***************************************!*\
  !*** ./src/context/Globalcontext.jsx ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MainProvider: () => (/* binding */ MainProvider),\n/* harmony export */   useMainProvider: () => (/* binding */ useMainProvider)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! papaparse */ \"(app-pages-browser)/./node_modules/papaparse/papaparse.min.js\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(papaparse__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! xlsx */ \"(app-pages-browser)/./node_modules/xlsx/xlsx.mjs\");\n/* __next_internal_client_entry_do_not_use__ MainProvider,useMainProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst MainContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nconst MainProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const [data, setData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [selectedFile, setSelectedFile] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [tableData, setTableData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [proccesingState, setProccesingState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [files, setFiles] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const fileInputRef = useRef(null);\n    const API_BASE = \"http://localhost:8000\" || 0;\n    const allowedFileTypes = [\n        \"text/csv\",\n        \"application/vnd.ms-excel\",\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    ];\n    const parseFile = (file)=>{\n        return new Promise((resolve)=>{\n            const reader = new FileReader();\n            reader.onload = (param)=>{\n                let { target } = param;\n                let dataWithStatus = [];\n                if (file.type === \"text/csv\") {\n                    papaparse__WEBPACK_IMPORTED_MODULE_2___default().parse(target.result, {\n                        header: true,\n                        skipEmptyLines: true,\n                        complete: (result)=>{\n                            dataWithStatus = result.data.map((row)=>({\n                                    ...row,\n                                    status: \"Pending\",\n                                    summary: \"\"\n                                }));\n                            resolve(dataWithStatus);\n                        }\n                    });\n                } else if (file.type === \"application/vnd.ms-excel\" || file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\n                    const workbook = xlsx__WEBPACK_IMPORTED_MODULE_3__.read(target.result, {\n                        type: \"binary\"\n                    });\n                    const sheetName = workbook.SheetNames[0];\n                    const worksheet = workbook.Sheets[sheetName];\n                    const jsonData = xlsx__WEBPACK_IMPORTED_MODULE_3__.utils.sheet_to_json(worksheet, {\n                        header: 1\n                    });\n                    const headers = jsonData[0];\n                    const rows = jsonData.slice(1);\n                    dataWithStatus = rows.map((row)=>{\n                        const rowData = {};\n                        headers.forEach((header, index)=>{\n                            rowData[header] = row[index];\n                        });\n                        return {\n                            ...rowData,\n                            status: \"Pending\",\n                            summary: \"\"\n                        };\n                    });\n                    resolve(dataWithStatus);\n                } else {\n                    console.error(\"Unsupported file type:\", file.type);\n                    resolve([]);\n                }\n            };\n            if (file.type === \"text/csv\") {\n                reader.readAsText(file);\n            } else {\n                reader.readAsBinaryString(file);\n            }\n        });\n    };\n    const handleFileUpload = async (files)=>{\n        const nonDuplicateFiles = files.filter((file)=>{\n            const isDuplicate = data.some((item)=>item.file.name === file.name && item.file.size === file.size);\n            if (isDuplicate) {\n                console.warn(\"Skipping duplicate file: \".concat(file.name));\n                return false;\n            }\n            return true;\n        });\n        if (nonDuplicateFiles.length === 0) {\n            console.warn(\"No new files to upload (all files are duplicates).\");\n            return;\n        }\n        const filesWithData = await Promise.all(nonDuplicateFiles.map(async (file)=>{\n            const tableData = await parseFile(file);\n            return {\n                file,\n                status: \"Pending\",\n                summary: \"\",\n                tableData\n            };\n        }));\n        setData((prevData)=>[\n                ...prevData,\n                ...filesWithData\n            ]);\n        setSelectedFile(nonDuplicateFiles[0]);\n        setTableData(filesWithData[0].tableData);\n    };\n    const handleFileChange = (event)=>{\n        const selectedFiles = Array.from(event.target.files);\n        const filteredFiles = selectedFiles.filter((file)=>allowedFileTypes.includes(file.type));\n        if (filteredFiles.length > 0) {\n            setFiles((prevFiles)=>[\n                    ...prevFiles,\n                    ...filteredFiles\n                ]);\n            handleFileUpload(filteredFiles);\n        }\n    };\n    const handleFileSelect = (file)=>{\n        setSelectedFile(file);\n        const existingFileData = data.find((item)=>item.file.name === file.name);\n        if (existingFileData) {\n            setTableData(existingFileData.tableData);\n        }\n    };\n    const handleDrop = (event)=>{\n        event.preventDefault();\n        const droppedFiles = Array.from(event.dataTransfer.files);\n        const filteredFiles = droppedFiles.filter((file)=>allowedFileTypes.includes(file.type));\n        if (filteredFiles.length > 0) {\n            setFiles((prevFiles)=>[\n                    ...prevFiles,\n                    ...filteredFiles\n                ]);\n            setData((prevData)=>[\n                    ...prevData,\n                    ...filteredFiles\n                ]);\n        }\n    };\n    const handleRemoveFile = (file)=>{\n        setData((prevData)=>prevData.filter((item)=>item.file.name !== file.name));\n        setFiles((prevFiles)=>prevFiles.filter((prevFile)=>prevFile.name !== file.name));\n        if ((selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.name) === file.name) {\n            const remainingFiles = data.filter((item)=>item.file.name !== file.name);\n            if (remainingFiles.length > 0) {\n                setSelectedFile(remainingFiles[0].file);\n                setTableData(remainingFiles[0].tableData);\n            } else {\n                setSelectedFile(null);\n                setTableData([]);\n            }\n        }\n    };\n    const startStreaming = async (file)=>{\n        const fileData = data.find((item)=>item.file.name === file.name);\n        if (!fileData || fileData.status !== \"Pending\") return;\n        setProccesingState(true);\n        setData((prevData)=>prevData.map((item)=>item.file.name === file.name ? {\n                    ...item,\n                    status: \"In Progress\"\n                } : item));\n        for(let i = 0; i < fileData.tableData.length; i++){\n            const row = fileData.tableData[i];\n            if (row.status === \"Done\") {\n                continue;\n            }\n            updateRowStatus(i, \"In Progress\");\n            const summary = await streamSummary(row, i, file);\n            if (summary) {\n                updateRowStatus(i, \"Done\");\n                updateRowSummary(i, summary);\n                setData((prevData)=>prevData.map((item)=>item.file.name === file.name ? {\n                            ...item,\n                            tableData: item.tableData.map((r, idx)=>idx === i ? {\n                                    ...r,\n                                    status: \"Done\",\n                                    summary\n                                } : r)\n                        } : item));\n            }\n        }\n        setData((prevData)=>prevData.map((item)=>item.file.name === file.name ? {\n                    ...item,\n                    status: \"Done\"\n                } : item));\n        setProccesingState(false);\n    };\n    const streamSummary = async (row, rowIndex, file)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE, \"/generate-summary\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(row)\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder();\n            let summary = \"\";\n            let classification = \"\";\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) break;\n                const chunk = decoder.decode(value, {\n                    stream: true\n                });\n                if (chunk.includes(\"summary:\")) {\n                    const summaryChunk = chunk.replace(\"summary:\", \"\").trim();\n                    summary += summaryChunk + \" \";\n                    updateRowSummary(rowIndex, summary);\n                } else if (chunk.includes(\"classification:\")) {\n                    const classificationChunk = chunk.replace(\"classification:\", \"\").trim();\n                    classification += classificationChunk + \" \";\n                    updateRowClassification(rowIndex, classification);\n                }\n            }\n            updateRowStatus(rowIndex, \"Done\");\n        } catch (error) {\n            console.error(\"Error streaming summary:\", error);\n            updateRowStatus(rowIndex, \"Error!\");\n            updateRowSummary(rowIndex, \"\");\n            updateRowClassification(rowIndex, \"\");\n            setData((prevData)=>prevData.map((item)=>item.file.name === file.name ? {\n                        ...item,\n                        tableData: item.tableData.map((r, idx)=>idx === rowIndex ? {\n                                ...r,\n                                status: \"Error!\",\n                                summary: \"\",\n                                classification: \"\"\n                            } : r)\n                    } : item));\n        }\n    };\n    const updateRowClassification = (rowIndex, classification)=>{\n        setTableData((prev)=>prev.map((row, i)=>i === rowIndex ? {\n                    ...row,\n                    classification\n                } : row));\n        setData((prevData)=>prevData.map((item)=>item.file.name === selectedFile.name ? {\n                    ...item,\n                    tableData: item.tableData.map((row, idx)=>idx === rowIndex ? {\n                            ...row,\n                            classification\n                        } : row)\n                } : item));\n    };\n    const updateRowSummary = (rowIndex, summary)=>{\n        setTableData((prev)=>prev.map((row, i)=>i === rowIndex ? {\n                    ...row,\n                    summary\n                } : row));\n        setData((prevData)=>prevData.map((item)=>item.file.name === selectedFile.name ? {\n                    ...item,\n                    tableData: item.tableData.map((row, idx)=>idx === rowIndex ? {\n                            ...row,\n                            summary\n                        } : row)\n                } : item));\n    };\n    const updateRowStatus = (index, status)=>{\n        setTableData((prev)=>prev.map((row, i)=>i === index ? {\n                    ...row,\n                    status\n                } : row));\n        setData((prevData)=>prevData.map((item)=>item.file.name === selectedFile.name ? {\n                    ...item,\n                    tableData: item.tableData.map((row, idx)=>idx === index ? {\n                            ...row,\n                            status\n                        } : row)\n                } : item));\n    };\n    const updateSummaryInGlobalState = (file, rowIndex, newSummary)=>{\n        setData((prevData)=>prevData.map((item)=>item.file.name === file.name ? {\n                    ...item,\n                    status: \"Pending\",\n                    tableData: item.tableData.map((row, idx)=>idx === rowIndex ? {\n                            ...row,\n                            summary: newSummary,\n                            status: \"Pending\"\n                        } : row)\n                } : item));\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MainContext.Provider, {\n        value: {\n            data,\n            setData,\n            selectedFile,\n            setSelectedFile,\n            tableData,\n            setTableData,\n            handleFileUpload,\n            startStreaming,\n            updateRowSummary,\n            updateRowStatus,\n            updateSummaryInGlobalState,\n            proccesingState,\n            setProccesingState,\n            files,\n            setFiles,\n            handleFileChange,\n            handleFileSelect,\n            handleDrop,\n            handleRemoveFile\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/mohsinidrees/Desktop/patient-app/static/src/context/Globalcontext.jsx\",\n        lineNumber: 371,\n        columnNumber: 5\n    }, undefined);\n};\n_s(MainProvider, \"ZuR22oAp/F9EYXm+6joOyMZ4/g8=\");\n_c = MainProvider;\nconst useMainProvider = ()=>{\n    _s1();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(MainContext);\n};\n_s1(useMainProvider, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"MainProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb250ZXh0L0dsb2JhbGNvbnRleHQuanN4IiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFDbUU7QUFDdEM7QUFDQTtBQUU3QixNQUFNTSw0QkFBY0wsb0RBQWFBO0FBRTFCLE1BQU1NLGVBQWU7UUFBQyxFQUFFQyxRQUFRLEVBQUU7O0lBQ3ZDLE1BQU0sQ0FBQ0MsTUFBTUMsUUFBUSxHQUFHUCwrQ0FBUUEsQ0FBQyxFQUFFO0lBQ25DLE1BQU0sQ0FBQ1EsY0FBY0MsZ0JBQWdCLEdBQUdULCtDQUFRQSxDQUFDO0lBQ2pELE1BQU0sQ0FBQ1UsV0FBV0MsYUFBYSxHQUFHWCwrQ0FBUUEsQ0FBQyxFQUFFO0lBQzdDLE1BQU0sQ0FBQ1ksaUJBQWlCQyxtQkFBbUIsR0FBR2IsK0NBQVFBLENBQUM7SUFDdkQsTUFBTSxDQUFDYyxPQUFPQyxTQUFTLEdBQUdmLCtDQUFRQSxDQUFDLEVBQUU7SUFDckMsTUFBTWdCLGVBQWVDLE9BQU87SUFHNUIsTUFBTUMsV0FBV0MsdUJBQWdDLElBQUksQ0FBRTtJQUV2RCxNQUFNRyxtQkFBbUI7UUFDdkI7UUFDQTtRQUNBO0tBQ0Q7SUFFRCxNQUFNQyxZQUFZLENBQUNDO1FBQ2pCLE9BQU8sSUFBSUMsUUFBUSxDQUFDQztZQUNsQixNQUFNQyxTQUFTLElBQUlDO1lBQ25CRCxPQUFPRSxNQUFNLEdBQUc7b0JBQUMsRUFBRUMsTUFBTSxFQUFFO2dCQUN6QixJQUFJQyxpQkFBaUIsRUFBRTtnQkFFdkIsSUFBSVAsS0FBS1EsSUFBSSxLQUFLLFlBQVk7b0JBQzVCL0Isc0RBQVUsQ0FBQzZCLE9BQU9JLE1BQU0sRUFBRTt3QkFDeEJDLFFBQVE7d0JBQ1JDLGdCQUFnQjt3QkFDaEJDLFVBQVUsQ0FBQ0g7NEJBQ1RILGlCQUFpQkcsT0FBTzVCLElBQUksQ0FBQ2dDLEdBQUcsQ0FBQyxDQUFDQyxNQUFTO29DQUN6QyxHQUFHQSxHQUFHO29DQUNOQyxRQUFRO29DQUNSQyxTQUFTO2dDQUNYOzRCQUNB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LE1BQU0wRCw2QkFBNkIsQ0FBQ3BHLE1BQU00RSxVQUFVeUI7UUFDbER0SCxRQUFRLENBQUNrRSxXQUNQQSxTQUFTbkMsR0FBRyxDQUFDLENBQUM0QixPQUNaQSxLQUFLMUMsSUFBSSxDQUFDMkMsSUFBSSxLQUFLM0MsS0FBSzJDLElBQUksR0FDeEI7b0JBQ0UsR0FBR0QsSUFBSTtvQkFDUDFCLFFBQVE7b0JBQ1I5QixXQUFXd0QsS0FBS3hELFNBQVMsQ0FBQzRCLEdBQUcsQ0FBQyxDQUFDQyxLQUFLNEQsTUFDbENBLFFBQVFDLFdBQ0o7NEJBQUUsR0FBRzdELEdBQUc7NEJBQUVFLFNBQVNvRjs0QkFBWXJGLFFBQVE7d0JBQVUsSUFDakREO2dCQUVSLElBQ0EyQjtJQUdWO0lBRUEscUJBQ0UsOERBQUMvRCxZQUFZMkgsUUFBUTtRQUNuQlosT0FBTztZQUNMNUc7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQUM7WUFDQWtEO1lBQ0ErQjtZQUNBSztZQUNBRjtZQUNBNkI7WUFDQWhIO1lBQ0FDO1lBQ0FDO1lBQ0FDO1lBQ0EyRDtZQUNBUTtZQUNBRztZQUNBSTtRQUNGO2tCQUVDcEY7Ozs7OztBQUdQLEVBQUU7R0FyWVdEO0tBQUFBO0FBc1lOLE1BQU0ySCxrQkFBa0I7O0lBQU1oSSxPQUFBQSxpREFBVUEsQ0FBQ0k7QUFBVyxFQUFFO0lBQWhENEgiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tb2hzaW5pZHJlZXMvRGVza3RvcC9wYXRpZW50LWFwcC9zdGF0aWMvc3JjL2NvbnRleHQvR2xvYmFsY29udGV4dC5qc3giXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQYXBhIGZyb20gXCJwYXBhcGFyc2VcIjtcbmltcG9ydCAqIGFzIFhMU1ggZnJvbSBcInhsc3hcIjtcblxuY29uc3QgTWFpbkNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG5cbmV4cG9ydCBjb25zdCBNYWluUHJvdmlkZXIgPSAoeyBjaGlsZHJlbiB9KSA9PiB7XG4gIGNvbnN0IFtkYXRhLCBzZXREYXRhXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgW3NlbGVjdGVkRmlsZSwgc2V0U2VsZWN0ZWRGaWxlXSA9IHVzZVN0YXRlKG51bGwpO1xuICBjb25zdCBbdGFibGVEYXRhLCBzZXRUYWJsZURhdGFdID0gdXNlU3RhdGUoW10pO1xuICBjb25zdCBbcHJvY2Nlc2luZ1N0YXRlLCBzZXRQcm9jY2VzaW5nU3RhdGVdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZmlsZXMsIHNldEZpbGVzXSA9IHVzZVN0YXRlKFtdKTtcbiAgY29uc3QgZmlsZUlucHV0UmVmID0gdXNlUmVmKG51bGwpO1xuXG5cbiAgY29uc3QgQVBJX0JBU0UgPSBwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19BUElfQkFTRSB8fCBcIlwiO1xuXG4gIGNvbnN0IGFsbG93ZWRGaWxlVHlwZXMgPSBbXG4gICAgXCJ0ZXh0L2NzdlwiLFxuICAgIFwiYXBwbGljYXRpb24vdm5kLm1zLWV4Y2VsXCIsXG4gICAgXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldFwiLFxuICBdO1xuXG4gIGNvbnN0IHBhcnNlRmlsZSA9IChmaWxlKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgcmVhZGVyLm9ubG9hZCA9ICh7IHRhcmdldCB9KSA9PiB7XG4gICAgICAgIGxldCBkYXRhV2l0aFN0YXR1cyA9IFtdO1xuXG4gICAgICAgIGlmIChmaWxlLnR5cGUgPT09IFwidGV4dC9jc3ZcIikge1xuICAgICAgICAgIFBhcGEucGFyc2UodGFyZ2V0LnJlc3VsdCwge1xuICAgICAgICAgICAgaGVhZGVyOiB0cnVlLFxuICAgICAgICAgICAgc2tpcEVtcHR5TGluZXM6IHRydWUsXG4gICAgICAgICAgICBjb21wbGV0ZTogKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICBkYXRhV2l0aFN0YXR1cyA9IHJlc3VsdC5kYXRhLm1hcCgocm93KSA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLnJvdyxcbiAgICAgICAgICAgICAgICBzdGF0dXM6IFwiUGVuZGluZ1wiLFxuICAgICAgICAgICAgICAgIHN1bW1hcnk6IFwiXCIsXG4gICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgcmVzb2x2ZShkYXRhV2l0aFN0YXR1cyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGZpbGUudHlwZSA9PT0gXCJhcHBsaWNhdGlvbi92bmQubXMtZXhjZWxcIiB8fFxuICAgICAgICAgIGZpbGUudHlwZSA9PT1cbiAgICAgICAgICAgIFwiYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnNwcmVhZHNoZWV0bWwuc2hlZXRcIlxuICAgICAgICApIHtcbiAgICAgICAgICBjb25zdCB3b3JrYm9vayA9IFhMU1gucmVhZCh0YXJnZXQucmVzdWx0LCB7IHR5cGU6IFwiYmluYXJ5XCIgfSk7XG4gICAgICAgICAgY29uc3Qgc2hlZXROYW1lID0gd29ya2Jvb2suU2hlZXROYW1lc1swXTtcbiAgICAgICAgICBjb25zdCB3b3Jrc2hlZXQgPSB3b3JrYm9vay5TaGVldHNbc2hlZXROYW1lXTtcbiAgICAgICAgICBjb25zdCBqc29uRGF0YSA9IFhMU1gudXRpbHMuc2hlZXRfdG9fanNvbih3b3Jrc2hlZXQsIHsgaGVhZGVyOiAxIH0pO1xuXG4gICAgICAgICAgY29uc3QgaGVhZGVycyA9IGpzb25EYXRhWzBdO1xuICAgICAgICAgIGNvbnN0IHJvd3MgPSBqc29uRGF0YS5zbGljZSgxKTtcblxuICAgICAgICAgIGRhdGFXaXRoU3RhdHVzID0gcm93cy5tYXAoKHJvdykgPT4ge1xuICAgICAgICAgICAgY29uc3Qgcm93RGF0YSA9IHt9O1xuICAgICAgICAgICAgaGVhZGVycy5mb3JFYWNoKChoZWFkZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgIHJvd0RhdGFbaGVhZGVyXSA9IHJvd1tpbmRleF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLnJvd0RhdGEsXG4gICAgICAgICAgICAgIHN0YXR1czogXCJQZW5kaW5nXCIsXG4gICAgICAgICAgICAgIHN1bW1hcnk6IFwiXCIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgcmVzb2x2ZShkYXRhV2l0aFN0YXR1cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlVuc3VwcG9ydGVkIGZpbGUgdHlwZTpcIiwgZmlsZS50eXBlKTtcbiAgICAgICAgICByZXNvbHZlKFtdKTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaWYgKGZpbGUudHlwZSA9PT0gXCJ0ZXh0L2NzdlwiKSB7XG4gICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZyhmaWxlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBoYW5kbGVGaWxlVXBsb2FkID0gYXN5bmMgKGZpbGVzKSA9PiB7XG4gICAgY29uc3Qgbm9uRHVwbGljYXRlRmlsZXMgPSBmaWxlcy5maWx0ZXIoKGZpbGUpID0+IHtcbiAgICAgIGNvbnN0IGlzRHVwbGljYXRlID0gZGF0YS5zb21lKFxuICAgICAgICAoaXRlbSkgPT4gaXRlbS5maWxlLm5hbWUgPT09IGZpbGUubmFtZSAmJiBpdGVtLmZpbGUuc2l6ZSA9PT0gZmlsZS5zaXplXG4gICAgICApO1xuICAgICAgaWYgKGlzRHVwbGljYXRlKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgU2tpcHBpbmcgZHVwbGljYXRlIGZpbGU6ICR7ZmlsZS5uYW1lfWApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcblxuICAgIGlmIChub25EdXBsaWNhdGVGaWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnNvbGUud2FybihcIk5vIG5ldyBmaWxlcyB0byB1cGxvYWQgKGFsbCBmaWxlcyBhcmUgZHVwbGljYXRlcykuXCIpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbGVzV2l0aERhdGEgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIG5vbkR1cGxpY2F0ZUZpbGVzLm1hcChhc3luYyAoZmlsZSkgPT4ge1xuICAgICAgICBjb25zdCB0YWJsZURhdGEgPSBhd2FpdCBwYXJzZUZpbGUoZmlsZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZmlsZSxcbiAgICAgICAgICBzdGF0dXM6IFwiUGVuZGluZ1wiLFxuICAgICAgICAgIHN1bW1hcnk6IFwiXCIsXG4gICAgICAgICAgdGFibGVEYXRhLFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgc2V0RGF0YSgocHJldkRhdGEpID0+IFsuLi5wcmV2RGF0YSwgLi4uZmlsZXNXaXRoRGF0YV0pO1xuXG4gICAgc2V0U2VsZWN0ZWRGaWxlKG5vbkR1cGxpY2F0ZUZpbGVzWzBdKTtcblxuICAgIHNldFRhYmxlRGF0YShmaWxlc1dpdGhEYXRhWzBdLnRhYmxlRGF0YSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlRmlsZUNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgIGNvbnN0IHNlbGVjdGVkRmlsZXMgPSBBcnJheS5mcm9tKGV2ZW50LnRhcmdldC5maWxlcyk7XG4gICAgY29uc3QgZmlsdGVyZWRGaWxlcyA9IHNlbGVjdGVkRmlsZXMuZmlsdGVyKChmaWxlKSA9PlxuICAgICAgYWxsb3dlZEZpbGVUeXBlcy5pbmNsdWRlcyhmaWxlLnR5cGUpXG4gICAgKTtcblxuICAgIGlmIChmaWx0ZXJlZEZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIHNldEZpbGVzKChwcmV2RmlsZXMpID0+IFsuLi5wcmV2RmlsZXMsIC4uLmZpbHRlcmVkRmlsZXNdKTtcbiAgICAgIGhhbmRsZUZpbGVVcGxvYWQoZmlsdGVyZWRGaWxlcyk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUZpbGVTZWxlY3QgPSAoZmlsZSkgPT4ge1xuICAgIHNldFNlbGVjdGVkRmlsZShmaWxlKTtcblxuICAgIGNvbnN0IGV4aXN0aW5nRmlsZURhdGEgPSBkYXRhLmZpbmQoKGl0ZW0pID0+IGl0ZW0uZmlsZS5uYW1lID09PSBmaWxlLm5hbWUpO1xuXG4gICAgaWYgKGV4aXN0aW5nRmlsZURhdGEpIHtcbiAgICAgIHNldFRhYmxlRGF0YShleGlzdGluZ0ZpbGVEYXRhLnRhYmxlRGF0YSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZURyb3AgPSAoZXZlbnQpID0+IHtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGRyb3BwZWRGaWxlcyA9IEFycmF5LmZyb20oZXZlbnQuZGF0YVRyYW5zZmVyLmZpbGVzKTtcbiAgICBjb25zdCBmaWx0ZXJlZEZpbGVzID0gZHJvcHBlZEZpbGVzLmZpbHRlcigoZmlsZSkgPT5cbiAgICAgIGFsbG93ZWRGaWxlVHlwZXMuaW5jbHVkZXMoZmlsZS50eXBlKVxuICAgICk7XG5cbiAgICBpZiAoZmlsdGVyZWRGaWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICBzZXRGaWxlcygocHJldkZpbGVzKSA9PiBbLi4ucHJldkZpbGVzLCAuLi5maWx0ZXJlZEZpbGVzXSk7XG4gICAgICBzZXREYXRhKChwcmV2RGF0YSkgPT4gWy4uLnByZXZEYXRhLCAuLi5maWx0ZXJlZEZpbGVzXSk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZVJlbW92ZUZpbGUgPSAoZmlsZSkgPT4ge1xuICAgIHNldERhdGEoKHByZXZEYXRhKSA9PlxuICAgICAgcHJldkRhdGEuZmlsdGVyKChpdGVtKSA9PiBpdGVtLmZpbGUubmFtZSAhPT0gZmlsZS5uYW1lKVxuICAgICk7XG5cbiAgICBzZXRGaWxlcygocHJldkZpbGVzKSA9PlxuICAgICAgcHJldkZpbGVzLmZpbHRlcigocHJldkZpbGUpID0+IHByZXZGaWxlLm5hbWUgIT09IGZpbGUubmFtZSlcbiAgICApO1xuXG4gICAgaWYgKHNlbGVjdGVkRmlsZT8ubmFtZSA9PT0gZmlsZS5uYW1lKSB7XG4gICAgICBjb25zdCByZW1haW5pbmdGaWxlcyA9IGRhdGEuZmlsdGVyKFxuICAgICAgICAoaXRlbSkgPT4gaXRlbS5maWxlLm5hbWUgIT09IGZpbGUubmFtZVxuICAgICAgKTtcblxuICAgICAgaWYgKHJlbWFpbmluZ0ZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgc2V0U2VsZWN0ZWRGaWxlKHJlbWFpbmluZ0ZpbGVzWzBdLmZpbGUpO1xuICAgICAgICBzZXRUYWJsZURhdGEocmVtYWluaW5nRmlsZXNbMF0udGFibGVEYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFNlbGVjdGVkRmlsZShudWxsKTtcbiAgICAgICAgc2V0VGFibGVEYXRhKFtdKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgY29uc3Qgc3RhcnRTdHJlYW1pbmcgPSBhc3luYyAoZmlsZSkgPT4ge1xuICAgIGNvbnN0IGZpbGVEYXRhID0gZGF0YS5maW5kKChpdGVtKSA9PiBpdGVtLmZpbGUubmFtZSA9PT0gZmlsZS5uYW1lKTtcbiAgICBpZiAoIWZpbGVEYXRhIHx8IGZpbGVEYXRhLnN0YXR1cyAhPT0gXCJQZW5kaW5nXCIpIHJldHVybjtcbiAgICBzZXRQcm9jY2VzaW5nU3RhdGUodHJ1ZSk7XG5cbiAgICBzZXREYXRhKChwcmV2RGF0YSkgPT5cbiAgICAgIHByZXZEYXRhLm1hcCgoaXRlbSkgPT5cbiAgICAgICAgaXRlbS5maWxlLm5hbWUgPT09IGZpbGUubmFtZSA/IHsgLi4uaXRlbSwgc3RhdHVzOiBcIkluIFByb2dyZXNzXCIgfSA6IGl0ZW1cbiAgICAgIClcbiAgICApO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlRGF0YS50YWJsZURhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHJvdyA9IGZpbGVEYXRhLnRhYmxlRGF0YVtpXTtcblxuICAgICAgaWYgKHJvdy5zdGF0dXMgPT09IFwiRG9uZVwiKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGVSb3dTdGF0dXMoaSwgXCJJbiBQcm9ncmVzc1wiKTtcblxuICAgICAgY29uc3Qgc3VtbWFyeSA9IGF3YWl0IHN0cmVhbVN1bW1hcnkocm93LCBpLCBmaWxlKTtcblxuICAgICAgaWYgKHN1bW1hcnkpIHtcbiAgICAgICAgdXBkYXRlUm93U3RhdHVzKGksIFwiRG9uZVwiKTtcbiAgICAgICAgdXBkYXRlUm93U3VtbWFyeShpLCBzdW1tYXJ5KTtcblxuICAgICAgICBzZXREYXRhKChwcmV2RGF0YSkgPT5cbiAgICAgICAgICBwcmV2RGF0YS5tYXAoKGl0ZW0pID0+XG4gICAgICAgICAgICBpdGVtLmZpbGUubmFtZSA9PT0gZmlsZS5uYW1lXG4gICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICAgIHRhYmxlRGF0YTogaXRlbS50YWJsZURhdGEubWFwKChyLCBpZHgpID0+XG4gICAgICAgICAgICAgICAgICAgIGlkeCA9PT0gaSA/IHsgLi4uciwgc3RhdHVzOiBcIkRvbmVcIiwgc3VtbWFyeSB9IDogclxuICAgICAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDogaXRlbVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXREYXRhKChwcmV2RGF0YSkgPT5cbiAgICAgIHByZXZEYXRhLm1hcCgoaXRlbSkgPT5cbiAgICAgICAgaXRlbS5maWxlLm5hbWUgPT09IGZpbGUubmFtZSA/IHsgLi4uaXRlbSwgc3RhdHVzOiBcIkRvbmVcIiB9IDogaXRlbVxuICAgICAgKVxuICAgICk7XG5cbiAgICBzZXRQcm9jY2VzaW5nU3RhdGUoZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IHN0cmVhbVN1bW1hcnkgPSBhc3luYyAocm93LCByb3dJbmRleCwgZmlsZSkgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFfS9nZW5lcmF0ZS1zdW1tYXJ5YCwge1xuICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJvdyksXG4gICAgICB9KTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlYWRlciA9IHJlc3BvbnNlLmJvZHkuZ2V0UmVhZGVyKCk7XG4gICAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG4gICAgICBsZXQgc3VtbWFyeSA9IFwiXCI7XG4gICAgICBsZXQgY2xhc3NpZmljYXRpb24gPSBcIlwiO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuICAgICAgICBpZiAoZG9uZSkgYnJlYWs7XG5cbiAgICAgICAgY29uc3QgY2h1bmsgPSBkZWNvZGVyLmRlY29kZSh2YWx1ZSwgeyBzdHJlYW06IHRydWUgfSk7XG5cbiAgICAgICAgaWYgKGNodW5rLmluY2x1ZGVzKFwic3VtbWFyeTpcIikpIHtcbiAgICAgICAgICBjb25zdCBzdW1tYXJ5Q2h1bmsgPSBjaHVuay5yZXBsYWNlKFwic3VtbWFyeTpcIiwgXCJcIikudHJpbSgpO1xuICAgICAgICAgIHN1bW1hcnkgKz0gc3VtbWFyeUNodW5rICsgXCIgXCI7XG4gICAgICAgICAgdXBkYXRlUm93U3VtbWFyeShyb3dJbmRleCwgc3VtbWFyeSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY2h1bmsuaW5jbHVkZXMoXCJjbGFzc2lmaWNhdGlvbjpcIikpIHtcbiAgICAgICAgICBjb25zdCBjbGFzc2lmaWNhdGlvbkNodW5rID0gY2h1bmtcbiAgICAgICAgICAgIC5yZXBsYWNlKFwiY2xhc3NpZmljYXRpb246XCIsIFwiXCIpXG4gICAgICAgICAgICAudHJpbSgpO1xuICAgICAgICAgIGNsYXNzaWZpY2F0aW9uICs9IGNsYXNzaWZpY2F0aW9uQ2h1bmsgKyBcIiBcIjtcbiAgICAgICAgICB1cGRhdGVSb3dDbGFzc2lmaWNhdGlvbihyb3dJbmRleCwgY2xhc3NpZmljYXRpb24pOyBcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB1cGRhdGVSb3dTdGF0dXMocm93SW5kZXgsIFwiRG9uZVwiKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIHN0cmVhbWluZyBzdW1tYXJ5OlwiLCBlcnJvcik7XG4gICAgICB1cGRhdGVSb3dTdGF0dXMocm93SW5kZXgsIFwiRXJyb3IhXCIpO1xuICAgICAgdXBkYXRlUm93U3VtbWFyeShyb3dJbmRleCwgXCJcIik7XG4gICAgICB1cGRhdGVSb3dDbGFzc2lmaWNhdGlvbihyb3dJbmRleCwgXCJcIik7XG5cbiAgICAgIHNldERhdGEoKHByZXZEYXRhKSA9PlxuICAgICAgICBwcmV2RGF0YS5tYXAoKGl0ZW0pID0+XG4gICAgICAgICAgaXRlbS5maWxlLm5hbWUgPT09IGZpbGUubmFtZVxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgLi4uaXRlbSxcbiAgICAgICAgICAgICAgICB0YWJsZURhdGE6IGl0ZW0udGFibGVEYXRhLm1hcCgociwgaWR4KSA9PlxuICAgICAgICAgICAgICAgICAgaWR4ID09PSByb3dJbmRleFxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IFwiRXJyb3IhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdW1tYXJ5OiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NpZmljYXRpb246IFwiXCIsXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IHJcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IGl0ZW1cbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlUm93Q2xhc3NpZmljYXRpb24gPSAocm93SW5kZXgsIGNsYXNzaWZpY2F0aW9uKSA9PiB7XG4gICAgXG4gICAgc2V0VGFibGVEYXRhKChwcmV2KSA9PlxuICAgICAgcHJldi5tYXAoKHJvdywgaSkgPT4gKGkgPT09IHJvd0luZGV4ID8geyAuLi5yb3csIGNsYXNzaWZpY2F0aW9uIH0gOiByb3cpKVxuICAgICk7XG5cbiAgICBzZXREYXRhKChwcmV2RGF0YSkgPT5cbiAgICAgIHByZXZEYXRhLm1hcCgoaXRlbSkgPT5cbiAgICAgICAgaXRlbS5maWxlLm5hbWUgPT09IHNlbGVjdGVkRmlsZS5uYW1lXG4gICAgICAgICAgPyB7XG4gICAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICAgIHRhYmxlRGF0YTogaXRlbS50YWJsZURhdGEubWFwKChyb3csIGlkeCkgPT5cbiAgICAgICAgICAgICAgICBpZHggPT09IHJvd0luZGV4ID8geyAuLi5yb3csIGNsYXNzaWZpY2F0aW9uIH0gOiByb3dcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IGl0ZW1cbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZVJvd1N1bW1hcnkgPSAocm93SW5kZXgsIHN1bW1hcnkpID0+IHtcbiAgICBzZXRUYWJsZURhdGEoKHByZXYpID0+XG4gICAgICBwcmV2Lm1hcCgocm93LCBpKSA9PiAoaSA9PT0gcm93SW5kZXggPyB7IC4uLnJvdywgc3VtbWFyeSB9IDogcm93KSlcbiAgICApO1xuXG4gICAgc2V0RGF0YSgocHJldkRhdGEpID0+XG4gICAgICBwcmV2RGF0YS5tYXAoKGl0ZW0pID0+XG4gICAgICAgIGl0ZW0uZmlsZS5uYW1lID09PSBzZWxlY3RlZEZpbGUubmFtZVxuICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICB0YWJsZURhdGE6IGl0ZW0udGFibGVEYXRhLm1hcCgocm93LCBpZHgpID0+XG4gICAgICAgICAgICAgICAgaWR4ID09PSByb3dJbmRleCA/IHsgLi4ucm93LCBzdW1tYXJ5IH0gOiByb3dcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IGl0ZW1cbiAgICAgIClcbiAgICApO1xuICB9O1xuXG4gIGNvbnN0IHVwZGF0ZVJvd1N0YXR1cyA9IChpbmRleCwgc3RhdHVzKSA9PiB7XG4gICAgc2V0VGFibGVEYXRhKChwcmV2KSA9PlxuICAgICAgcHJldi5tYXAoKHJvdywgaSkgPT4gKGkgPT09IGluZGV4ID8geyAuLi5yb3csIHN0YXR1cyB9IDogcm93KSlcbiAgICApO1xuXG4gICAgc2V0RGF0YSgocHJldkRhdGEpID0+XG4gICAgICBwcmV2RGF0YS5tYXAoKGl0ZW0pID0+XG4gICAgICAgIGl0ZW0uZmlsZS5uYW1lID09PSBzZWxlY3RlZEZpbGUubmFtZVxuICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICB0YWJsZURhdGE6IGl0ZW0udGFibGVEYXRhLm1hcCgocm93LCBpZHgpID0+XG4gICAgICAgICAgICAgICAgaWR4ID09PSBpbmRleCA/IHsgLi4ucm93LCBzdGF0dXMgfSA6IHJvd1xuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDogaXRlbVxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlU3VtbWFyeUluR2xvYmFsU3RhdGUgPSAoZmlsZSwgcm93SW5kZXgsIG5ld1N1bW1hcnkpID0+IHtcbiAgICBzZXREYXRhKChwcmV2RGF0YSkgPT5cbiAgICAgIHByZXZEYXRhLm1hcCgoaXRlbSkgPT5cbiAgICAgICAgaXRlbS5maWxlLm5hbWUgPT09IGZpbGUubmFtZVxuICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAuLi5pdGVtLFxuICAgICAgICAgICAgICBzdGF0dXM6IFwiUGVuZGluZ1wiLFxuICAgICAgICAgICAgICB0YWJsZURhdGE6IGl0ZW0udGFibGVEYXRhLm1hcCgocm93LCBpZHgpID0+XG4gICAgICAgICAgICAgICAgaWR4ID09PSByb3dJbmRleFxuICAgICAgICAgICAgICAgICAgPyB7IC4uLnJvdywgc3VtbWFyeTogbmV3U3VtbWFyeSwgc3RhdHVzOiBcIlBlbmRpbmdcIiB9XG4gICAgICAgICAgICAgICAgICA6IHJvd1xuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgfVxuICAgICAgICAgIDogaXRlbVxuICAgICAgKVxuICAgICk7XG4gIH07XG5cbiAgcmV0dXJuIChcbiAgICA8TWFpbkNvbnRleHQuUHJvdmlkZXJcbiAgICAgIHZhbHVlPXt7XG4gICAgICAgIGRhdGEsXG4gICAgICAgIHNldERhdGEsXG4gICAgICAgIHNlbGVjdGVkRmlsZSxcbiAgICAgICAgc2V0U2VsZWN0ZWRGaWxlLFxuICAgICAgICB0YWJsZURhdGEsXG4gICAgICAgIHNldFRhYmxlRGF0YSxcbiAgICAgICAgaGFuZGxlRmlsZVVwbG9hZCxcbiAgICAgICAgc3RhcnRTdHJlYW1pbmcsXG4gICAgICAgIHVwZGF0ZVJvd1N1bW1hcnksXG4gICAgICAgIHVwZGF0ZVJvd1N0YXR1cyxcbiAgICAgICAgdXBkYXRlU3VtbWFyeUluR2xvYmFsU3RhdGUsXG4gICAgICAgIHByb2NjZXNpbmdTdGF0ZSxcbiAgICAgICAgc2V0UHJvY2Nlc2luZ1N0YXRlLFxuICAgICAgICBmaWxlcyxcbiAgICAgICAgc2V0RmlsZXMsXG4gICAgICAgIGhhbmRsZUZpbGVDaGFuZ2UsXG4gICAgICAgIGhhbmRsZUZpbGVTZWxlY3QsXG4gICAgICAgIGhhbmRsZURyb3AsXG4gICAgICAgIGhhbmRsZVJlbW92ZUZpbGUsXG4gICAgICB9fVxuICAgID5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L01haW5Db250ZXh0LlByb3ZpZGVyPlxuICApO1xufTtcbmV4cG9ydCBjb25zdCB1c2VNYWluUHJvdmlkZXIgPSAoKSA9PiB1c2VDb250ZXh0KE1haW5Db250ZXh0KTtcbiJdLCJuYW1lcyI6WyJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlU3RhdGUiLCJQYXBhIiwiWExTWCIsIk1haW5Db250ZXh0IiwiTWFpblByb3ZpZGVyIiwiY2hpbGRyZW4iLCJkYXRhIiwic2V0RGF0YSIsInNlbGVjdGVkRmlsZSIsInNldFNlbGVjdGVkRmlsZSIsInRhYmxlRGF0YSIsInNldFRhYmxlRGF0YSIsInByb2NjZXNpbmdTdGF0ZSIsInNldFByb2NjZXNpbmdTdGF0ZSIsImZpbGVzIiwic2V0RmlsZXMiLCJmaWxlSW5wdXRSZWYiLCJ1c2VSZWYiLCJBUElfQkFTRSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19BUElfQkFTRSIsImFsbG93ZWRGaWxlVHlwZXMiLCJwYXJzZUZpbGUiLCJmaWxlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWFkZXIiLCJGaWxlUmVhZGVyIiwib25sb2FkIiwidGFyZ2V0IiwiZGF0YVdpdGhTdGF0dXMiLCJ0eXBlIiwicGFyc2UiLCJyZXN1bHQiLCJoZWFkZXIiLCJza2lwRW1wdHlMaW5lcyIsImNvbXBsZXRlIiwibWFwIiwicm93Iiwic3RhdHVzIiwic3VtbWFyeSIsIndvcmtib29rIiwicmVhZCIsInNoZWV0TmFtZSIsIlNoZWV0TmFtZXMiLCJ3b3Jrc2hlZXQiLCJTaGVldHMiLCJqc29uRGF0YSIsInV0aWxzIiwic2hlZXRfdG9fanNvbiIsImhlYWRlcnMiLCJyb3dzIiwic2xpY2UiLCJyb3dEYXRhIiwiZm9yRWFjaCIsImluZGV4IiwiY29uc29sZSIsImVycm9yIiwicmVhZEFzVGV4dCIsInJlYWRBc0JpbmFyeVN0cmluZyIsImhhbmRsZUZpbGVVcGxvYWQiLCJub25EdXBsaWNhdGVGaWxlcyIsImZpbHRlciIsImlzRHVwbGljYXRlIiwic29tZSIsIml0ZW0iLCJuYW1lIiwic2l6ZSIsIndhcm4iLCJsZW5ndGgiLCJmaWxlc1dpdGhEYXRhIiwiYWxsIiwicHJldkRhdGEiLCJoYW5kbGVGaWxlQ2hhbmdlIiwiZXZlbnQiLCJzZWxlY3RlZEZpbGVzIiwiQXJyYXkiLCJmcm9tIiwiZmlsdGVyZWRGaWxlcyIsImluY2x1ZGVzIiwicHJldkZpbGVzIiwiaGFuZGxlRmlsZVNlbGVjdCIsImV4aXN0aW5nRmlsZURhdGEiLCJmaW5kIiwiaGFuZGxlRHJvcCIsInByZXZlbnREZWZhdWx0IiwiZHJvcHBlZEZpbGVzIiwiZGF0YVRyYW5zZmVyIiwiaGFuZGxlUmVtb3ZlRmlsZSIsInByZXZGaWxlIiwicmVtYWluaW5nRmlsZXMiLCJzdGFydFN0cmVhbWluZyIsImZpbGVEYXRhIiwiaSIsInVwZGF0ZVJvd1N0YXR1cyIsInN0cmVhbVN1bW1hcnkiLCJ1cGRhdGVSb3dTdW1tYXJ5IiwiciIsImlkeCIsInJvd0luZGV4IiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwib2siLCJFcnJvciIsImdldFJlYWRlciIsImRlY29kZXIiLCJUZXh0RGVjb2RlciIsImNsYXNzaWZpY2F0aW9uIiwiZG9uZSIsInZhbHVlIiwiY2h1bmsiLCJkZWNvZGUiLCJzdHJlYW0iLCJzdW1tYXJ5Q2h1bmsiLCJyZXBsYWNlIiwidHJpbSIsImNsYXNzaWZpY2F0aW9uQ2h1bmsiLCJ1cGRhdGVSb3dDbGFzc2lmaWNhdGlvbiIsInByZXYiLCJ1cGRhdGVTdW1tYXJ5SW5HbG9iYWxTdGF0ZSIsIm5ld1N1bW1hcnkiLCJQcm92aWRlciIsInVzZU1haW5Qcm92aWRlciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/context/Globalcontext.jsx\n"));

/***/ })

});