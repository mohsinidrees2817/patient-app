"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"10a894005e47\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyIvVXNlcnMvbW9oc2luaWRyZWVzL0Rlc2t0b3AvcGF0aWVudC1hcHAvc3RhdGljL3NyYy9hcHAvZ2xvYmFscy5jc3MiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgXCIxMGE4OTQwMDVlNDdcIlxuaWYgKG1vZHVsZS5ob3QpIHsgbW9kdWxlLmhvdC5hY2NlcHQoKSB9XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/context/Globalcontext.jsx":
/*!***************************************!*\
  !*** ./src/context/Globalcontext.jsx ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MainProvider: () => (/* binding */ MainProvider),\n/* harmony export */   useMainProvider: () => (/* binding */ useMainProvider)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! papaparse */ \"(app-pages-browser)/./node_modules/papaparse/papaparse.min.js\");\n/* harmony import */ var papaparse__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(papaparse__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! xlsx */ \"(app-pages-browser)/./node_modules/xlsx/xlsx.mjs\");\n/* __next_internal_client_entry_do_not_use__ MainProvider,useMainProvider auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst MainContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\nconst MainProvider = (param)=>{\n    let { children } = param;\n    _s();\n    const [data, setData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [selectedFile, setSelectedFile] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [tableData, setTableData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [proccesingState, setProccesingState] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [files, setFiles] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const fileInputRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const API_BASE = \"http://localhost:8000\" || 0;\n    const allowedFileTypes = [\n        \"text/csv\",\n        \"application/vnd.ms-excel\",\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n    ];\n    const parseFile = (file)=>{\n        return new Promise((resolve)=>{\n            const reader = new FileReader();\n            reader.onload = (param)=>{\n                let { target } = param;\n                let dataWithStatus = [];\n                if (file.type === \"text/csv\") {\n                    papaparse__WEBPACK_IMPORTED_MODULE_2___default().parse(target.result, {\n                        header: true,\n                        skipEmptyLines: true,\n                        complete: (result)=>{\n                            dataWithStatus = result.data.map((row)=>({\n                                    ...row,\n                                    status: \"Pending\",\n                                    summary: \"\",\n                                    clas\n                                }));\n                            resolve(dataWithStatus);\n                        }\n                    });\n                } else if (file.type === \"application/vnd.ms-excel\" || file.type === \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\") {\n                    const workbook = xlsx__WEBPACK_IMPORTED_MODULE_3__.read(target.result, {\n                        type: \"binary\"\n                    });\n                    const sheetName = workbook.SheetNames[0];\n                    const worksheet = workbook.Sheets[sheetName];\n                    const jsonData = xlsx__WEBPACK_IMPORTED_MODULE_3__.utils.sheet_to_json(worksheet, {\n                        header: 1\n                    });\n                    const headers = jsonData[0];\n                    const rows = jsonData.slice(1);\n                    dataWithStatus = rows.map((row)=>{\n                        const rowData = {};\n                        headers.forEach((header, index)=>{\n                            rowData[header] = row[index];\n                        });\n                        return {\n                            ...rowData,\n                            status: \"Pending\",\n                            summary: \"\"\n                        };\n                    });\n                    resolve(dataWithStatus);\n                } else {\n                    console.error(\"Unsupported file type:\", file.type);\n                    resolve([]);\n                }\n            };\n            if (file.type === \"text/csv\") {\n                reader.readAsText(file);\n            } else {\n                reader.readAsBinaryString(file);\n            }\n        });\n    };\n    const handleFileUpload = async (files)=>{\n        const nonDuplicateFiles = files.filter((file)=>{\n            const isDuplicate = data.some((item)=>item.file.name === file.name && item.file.size === file.size);\n            if (isDuplicate) {\n                console.warn(\"Skipping duplicate file: \".concat(file.name));\n                return false;\n            }\n            return true;\n        });\n        if (nonDuplicateFiles.length === 0) {\n            console.warn(\"No new files to upload (all files are duplicates).\");\n            return;\n        }\n        const filesWithData = await Promise.all(nonDuplicateFiles.map(async (file)=>{\n            const tableData = await parseFile(file);\n            return {\n                file,\n                status: \"Pending\",\n                summary: \"\",\n                classification: \"\",\n                tableData\n            };\n        }));\n        setData((prevData)=>[\n                ...prevData,\n                ...filesWithData\n            ]);\n        setSelectedFile(nonDuplicateFiles[0]);\n        setTableData(filesWithData[0].tableData);\n    };\n    const handleFileChange = (event)=>{\n        const selectedFiles = Array.from(event.target.files);\n        const filteredFiles = selectedFiles.filter((file)=>allowedFileTypes.includes(file.type));\n        if (filteredFiles.length > 0) {\n            setFiles((prevFiles)=>[\n                    ...prevFiles,\n                    ...filteredFiles\n                ]);\n            handleFileUpload(filteredFiles);\n        }\n    };\n    const handleFileSelect = (file)=>{\n        setSelectedFile(file);\n        const existingFileData = data.find((item)=>item.file.name === file.name);\n        if (existingFileData) {\n            setTableData(existingFileData.tableData);\n        }\n    };\n    const handleDrop = (event)=>{\n        event.preventDefault();\n        const droppedFiles = Array.from(event.dataTransfer.files);\n        const filteredFiles = droppedFiles.filter((file)=>allowedFileTypes.includes(file.type));\n        if (filteredFiles.length > 0) {\n            setFiles((prevFiles)=>[\n                    ...prevFiles,\n                    ...filteredFiles\n                ]);\n            setData((prevData)=>[\n                    ...prevData,\n                    ...filteredFiles\n                ]);\n        }\n    };\n    const handleRemoveFile = (file)=>{\n        setData((prevData)=>prevData.filter((item)=>item.file.name !== file.name));\n        setFiles((prevFiles)=>prevFiles.filter((prevFile)=>prevFile.name !== file.name));\n        if ((selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.name) === file.name) {\n            const remainingFiles = data.filter((item)=>item.file.name !== file.name);\n            if (remainingFiles.length > 0) {\n                setSelectedFile(remainingFiles[0].file);\n                setTableData(remainingFiles[0].tableData);\n            } else {\n                setSelectedFile(null);\n                setTableData([]);\n            }\n        }\n        if (fileInputRef.current) {\n            fileInputRef.current.value = \"\";\n        }\n    };\n    const startStreaming = async (file)=>{\n        const fileData = data.find((item)=>item.file.name === file.name);\n        if (!fileData || fileData.status !== \"Pending\") return;\n        setProccesingState(true);\n        setData((prevData)=>prevData.map((item)=>item.file.name === file.name ? {\n                    ...item,\n                    status: \"In Progress\"\n                } : item));\n        for(let i = 0; i < fileData.tableData.length; i++){\n            const row = fileData.tableData[i];\n            if (row.status === \"Done\") {\n                continue;\n            }\n            updateRowStatus(i, \"In Progress\");\n            const summary = await streamSummary(row, i, file);\n            if (summary) {\n                updateRowStatus(i, \"Done\");\n                updateRowSummary(i, summary);\n                setData((prevData)=>prevData.map((item)=>item.file.name === file.name ? {\n                            ...item,\n                            tableData: item.tableData.map((r, idx)=>idx === i ? {\n                                    ...r,\n                                    status: \"Done\",\n                                    summary\n                                } : r)\n                        } : item));\n            }\n        }\n        setData((prevData)=>prevData.map((item)=>item.file.name === file.name ? {\n                    ...item,\n                    status: \"Done\"\n                } : item));\n        setProccesingState(false);\n    };\n    const streamSummary = async (row, rowIndex, file)=>{\n        try {\n            const response = await fetch(\"\".concat(API_BASE, \"/generate-summary\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify(row)\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const reader = response.body.getReader();\n            const decoder = new TextDecoder();\n            let summary = \"\";\n            let classification = \"\";\n            while(true){\n                const { done, value } = await reader.read();\n                if (done) break;\n                const chunk = decoder.decode(value, {\n                    stream: true\n                });\n                if (chunk.includes(\"summary:\")) {\n                    const summaryChunk = chunk.replace(\"summary:\", \"\").trim();\n                    summary += summaryChunk + \" \";\n                    updateRowSummary(rowIndex, summary);\n                } else if (chunk.includes(\"classification:\")) {\n                    const classificationChunk = chunk.replace(\"classification:\", \"\").trim();\n                    classification += classificationChunk + \" \";\n                    updateRowClassification(rowIndex, classification);\n                }\n            }\n            updateRowStatus(rowIndex, \"Done\");\n        } catch (error) {\n            console.error(\"Error streaming summary:\", error);\n            updateRowStatus(rowIndex, \"Error!\");\n            updateRowSummary(rowIndex, \"\");\n            updateRowClassification(rowIndex, \"\");\n            setData((prevData)=>prevData.map((item)=>item.file.name === file.name ? {\n                        ...item,\n                        tableData: item.tableData.map((r, idx)=>idx === rowIndex ? {\n                                ...r,\n                                status: \"Error!\",\n                                summary: \"\",\n                                classification: \"\"\n                            } : r)\n                    } : item));\n        }\n    };\n    const updateRowClassification = (rowIndex, classification)=>{\n        setTableData((prev)=>prev.map((row, i)=>i === rowIndex ? {\n                    ...row,\n                    classification\n                } : row));\n        setData((prevData)=>prevData.map((item)=>item.file.name === selectedFile.name ? {\n                    ...item,\n                    tableData: item.tableData.map((row, idx)=>idx === rowIndex ? {\n                            ...row,\n                            classification\n                        } : row)\n                } : item));\n    };\n    const updateRowSummary = (rowIndex, summary)=>{\n        setTableData((prev)=>prev.map((row, i)=>i === rowIndex ? {\n                    ...row,\n                    summary\n                } : row));\n        setData((prevData)=>prevData.map((item)=>item.file.name === selectedFile.name ? {\n                    ...item,\n                    tableData: item.tableData.map((row, idx)=>idx === rowIndex ? {\n                            ...row,\n                            summary\n                        } : row)\n                } : item));\n    };\n    const updateRowStatus = (index, status)=>{\n        setTableData((prev)=>prev.map((row, i)=>i === index ? {\n                    ...row,\n                    status\n                } : row));\n        setData((prevData)=>prevData.map((item)=>item.file.name === selectedFile.name ? {\n                    ...item,\n                    tableData: item.tableData.map((row, idx)=>idx === index ? {\n                            ...row,\n                            status\n                        } : row)\n                } : item));\n    };\n    const updateSummaryInGlobalState = (file, rowIndex, newSummary)=>{\n        setData((prevData)=>prevData.map((item)=>item.file.name === file.name ? {\n                    ...item,\n                    status: \"Pending\",\n                    tableData: item.tableData.map((row, idx)=>idx === rowIndex ? {\n                            ...row,\n                            summary: newSummary,\n                            classification: \"\",\n                            status: \"Pending\"\n                        } : row)\n                } : item));\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MainContext.Provider, {\n        value: {\n            data,\n            setData,\n            selectedFile,\n            setSelectedFile,\n            tableData,\n            setTableData,\n            handleFileUpload,\n            startStreaming,\n            updateRowSummary,\n            updateRowStatus,\n            updateSummaryInGlobalState,\n            proccesingState,\n            setProccesingState,\n            files,\n            setFiles,\n            handleFileChange,\n            handleFileSelect,\n            handleDrop,\n            handleRemoveFile,\n            fileInputRef\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/mohsinidrees/Desktop/patient-app/static/src/context/Globalcontext.jsx\",\n        lineNumber: 379,\n        columnNumber: 5\n    }, undefined);\n};\n_s(MainProvider, \"ZuR22oAp/F9EYXm+6joOyMZ4/g8=\");\n_c = MainProvider;\nconst useMainProvider = ()=>{\n    _s1();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(MainContext);\n};\n_s1(useMainProvider, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"MainProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/context/Globalcontext.jsx\n"));

/***/ })

});